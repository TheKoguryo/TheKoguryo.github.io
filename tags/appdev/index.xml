<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>appdev on TheKoguryo&#39;s 기술 블로그</title>
    <link>https://thekoguryo.github.io/tags/appdev/</link>
    <description>Recent content in appdev on TheKoguryo&#39;s 기술 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Tue, 26 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://thekoguryo.github.io/tags/appdev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>7.1 Spring Boot 애플리케이션 개발하기</title>
      <link>https://thekoguryo.github.io/oracle-cloudnative/appdev/1.develop-spring-boot-app/</link>
      <pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thekoguryo.github.io/oracle-cloudnative/appdev/1.develop-spring-boot-app/</guid>
      <description>7.1 Spring Boot 애플리케이션 개발하기 Spring Boot 예제를 바탕으로 앱 개발, 컨테이너 이미지 빌드, OKE에 배포하는 과정을 확인해 봅니다. Spring Boot 기반 마이크로 서비스 만들기 Spring I</description>
    </item>
    
    <item>
      <title>7.2.1 GraalVM 기반 컨테이너 이미지 만들기</title>
      <link>https://thekoguryo.github.io/oracle-cloudnative/appdev/2.graalvm/1.use-graal-vm/</link>
      <pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thekoguryo.github.io/oracle-cloudnative/appdev/2.graalvm/1.use-graal-vm/</guid>
      <description>7.2.1 GraalVM 기반 컨테이너 이미지 만들기 여기서는 향상된 just-in-time(JIT) 컴파일러를 통한 가장 간편한 방법으로 코드 변경없이 자바 애플케이션의 성능 개선하는 방벙으로 알아보겠습니다.</description>
    </item>
    
    <item>
      <title>7. 애플리케이션 개발하기</title>
      <link>https://thekoguryo.github.io/oracle-cloudnative/appdev/</link>
      <pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://thekoguryo.github.io/oracle-cloudnative/appdev/</guid>
      <description>7. 애플리케이션 개발하기</description>
    </item>
    
  </channel>
</rss>
