<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Workspace on TheKoguryo&#39;s 기술 블로그</title>
    <link>https://thekoguryo.github.io/tags/workspace/</link>
    <description>Recent content in Workspace on TheKoguryo&#39;s 기술 블로그</description>
    <generator>Hugo</generator>
    <language>ko</language>
    <lastBuildDate>Mon, 01 Apr 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://thekoguryo.github.io/tags/workspace/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>14.3.5 다중 환경을 위한 workspace 사용하기</title>
      <link>https://thekoguryo.github.io/oci/chapter14/3/5/</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://thekoguryo.github.io/oci/chapter14/3/5/</guid>
      <description>&lt;h3 id=&#34;1435-다중-환경을-위한-workspace-사용하기&#34;&gt;14.3.5 다중 환경을 위한 workspace 사용하기&lt;/h3&gt;&#xA;&lt;p&gt;OCI는 여러 Region을 제공하고 있습니다. 필요에 따라 동일 자원을 여러 Region에 한꺼번에 만들어야 하는 경우가 있습니다. 하지만 앞서 실습에서 잠깐 보았겠지만, terraform 설정이 실행되면 기본으로 해당 폴더에 terraform.tfstate로 상태를 관리하게되어 동일 Terraform 설정을 그대로 사용할 경우 상태파일이 충돌나서 원하는 데로 동작하지 않게 됩니다. Terraform 설정 폴더 자체를 통채로 복사해서 대상 Region 별로 사용해도 되지만, 관리가 번거롭게 됩니다. 그래서 Terraform에서는 workspace만 개념을 제공하고, 기본적으로 default workspace를 사용하게 됩니다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
