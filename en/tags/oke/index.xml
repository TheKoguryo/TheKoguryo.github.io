<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>oke on TheKoguryo's Tech Blog</title><link>https://thekoguryo.github.io/en/tags/oke/</link><description>Recent content in oke on TheKoguryo's Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Fri, 14 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://thekoguryo.github.io/en/tags/oke/index.xml" rel="self" type="application/rss+xml"/><item><title>1.1 Introduction to Oracle Container Engine for Kubernetes (OKE)</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oke/1.oke/</link><pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oke/1.oke/</guid><description>1.1 Introduction to Oracle Container Engine for Kubernetes (OKE) Oracle Container Engine for Kubernetes is a managed Kubernetes service provided by OCI. We call it OKE for short and we are using a CNCF certified version of Kubernetes.
When you create a cluster with the Quick Start version, a Kubernetes cluster with the following structure is created using OCI resources.
Control Plane Nodes:
In Kubernetes, the Control Plane is an area managed by OCI and is not directly exposed to users.</description></item><item><title>6.1 Installing Verrazzano</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/verrazzano/1.install-verrazzano/</link><pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/verrazzano/1.install-verrazzano/</guid><description>6.1 Installing Verrazzano on a Kubernetes cluster Preparing the Kubernetes cluster Verrazzano is a way to install on a Kubernetes cluster using the Kubernetes Operator method. In other words, you need a Kubernetes cluster to install on. Here we proceed based on the OKE cluster.
Preparing the Container Engine for Kubernetes (OKE) cluster Create an OKE cluster with default settings in Quick Create mode.
Prepare an environment with sufficient capacity to deploy all components and example applications on Verrazzano.</description></item><item><title>5.2.1 Log Monitoring Using OCI Logging</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oci-services/logging/1.oci-logging/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oci-services/logging/1.oci-logging/</guid><description>5.2.1 Log monitoring using OCI Logging Application log monitoring deployed on OKE can be monitored through OCI Logging service.
Set OCI Logging service permission Create a Dynamic Group for Worker Nodes Log in to the OCI console.
Go to Identity &amp;amp; Security &amp;gt; Identity &amp;gt; Compartments from the top left hamburger menu.
Check the OCID of the Compartment with the OKE cluster.
Go to the left Dynamic Group menu and create a Dynamic Group with the following rules.</description></item><item><title>1.6.1 Using Block Volumes</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oke/6.persistent-volume/1.block-volume/</link><pubDate>Sat, 13 Nov 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oke/6.persistent-volume/1.block-volume/</guid><description>1.6.1 Using Block Volumes The container&amp;rsquo;s internal storage is basically destroyed when the container is deleted or terminated. A separate Persistent Volume is used to protect data from disappearing and to store data that needs to be preserved.
Check the StorageClass for the default installed Persistent Volume OKE provides Persistent Volume to use OCI Block Volume service as a service provided based on OCI IaaS. As of the current version, we are using two types: the FlexVolume volume plugin and the Container Storage Interface (CSI) volume plugin.</description></item><item><title>1. Using Managed Kubernetes OKE</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oke/</link><pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oke/</guid><description>1. Managed Kubernetes Oracle Container Engine for Kubernetes (OKE) In this document, on the premise that you have basic knowledge of containers such as Docker and Kubernetes, I would like to explain what you can refer to when starting OKE (Oracle Container for Kubernetes).</description></item><item><title>1.3.1 Connecting to a Cluster with Cloud Shell</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oke/3.access-cluster/1.cloudshell-access/</link><pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oke/3.access-cluster/1.cloudshell-access/</guid><description>1.3.1 Connecting to a Cluster with Cloud Shell Cloud Shell [Cloud Shell] (https://docs.oracle.com/en-us/iaas/Content/API/Concepts/cloudshellintro.htm) is a web browser-based Linux terminal provided by Oracle Cloud Console as described in the official documentation. no see. You can understand that it runs as a small virtual machine, and it provides pre-authenticated OCI CLI for users who access the Oracle Cloud console, and provides additional cli and settings by default.
It is provided by default as kubectl, the Kubernetes CLI, for connecting to the OKE cluster.</description></item><item><title>1.3.2 Connecting to a Cluster in a Local Environment</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oke/3.access-cluster/2.local-access/</link><pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oke/3.access-cluster/2.local-access/</guid><description>1.3.2 Connecting to a cluster in the local environment OCI CLI installation and environment configuration Install OCI CLI Install OCI OCI by referring to the official documentation.
https://docs.oracle.com/en-us/iaas/Content/API/SDKDocs/cliinstall.htm Oracle Linux Base Example
Installation
bash -c &amp;#34;$(curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)&amp;#34; Check the installation
oci --version OCI CLI Config File setting Pre-check the information you need for setup
user OCID
Click User Settings in the user profile in the upper right corner and check the user OCID Tenancy OCID</description></item><item><title>5.2.2.1 Preparing OpenSearch to Use</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oci-services/logging/2.oci-opensearch.old/1.configure-oci-opensearch/</link><pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oci-services/logging/2.oci-opensearch.old/1.configure-oci-opensearch/</guid><description>5.2.2.1 Preparing OpenSearch to Use OpenSearch and OpenDashboards will be forked from ElasticSearch and Cabana in 2021 and are operating as separate open source projects. OCI OpenSearch is a managed service provided by OCI.
Setting policy to use OCI Search service Granting OCI Search service permission Allow service opensearch to manage vnics in compartment &amp;lt;NETWORK_RESOURCES_COMPARTMENT&amp;gt; Allow service opensearch to manage vcns in compartment &amp;lt;NETWORK_RESOURCES_COMPARTMENT&amp;gt; Allow service opensearch to use subnets in compartment &amp;lt;NETWORK_RESOURCES_COMPARTMENT&amp;gt; Allow service opensearch to use network-security-groups in compartment &amp;lt;NETWORK_RESOURCES_COMPARTMENT&amp;gt; Granting OCI Search Service Management Permissions in Oracle Cloud Console Example when the group the user belongs to is SearchOpenSearchAdmins Allow group SearchOpenSearchAdmins to manage opensearch-family in compartment &amp;lt;CLUSTER_RESOURCES_COMPARTMENT&amp;gt; Create an OCI OpenSearch cluster Log in to the Oracle Cloud Console.</description></item><item><title>5.2.2.2 Send OKE logs by FluentD</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oci-services/logging/2.oci-opensearch.old/2.fluentd-to-oci-opensearch/</link><pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oci-services/logging/2.oci-opensearch.old/2.fluentd-to-oci-opensearch/</guid><description>5.2.2.2 Send OKE logs by FluentD Use OpenSearch and OpenSearch Dashboard instead of ElasticSearch and Kibana in your EFK configuration.
Fluentd configuration Create a Service Account for Fluentd installation and define the relevant permissions.
configmap to define additional settings
Fluentd-related settings are all defined in a .conf file under /fluentd/etc/ in the container. You can override these files. OCI OpenSearch clusters now use Self Signed certificates by default. Leave only the basics that are absolutely necessary for the connection.</description></item><item><title>1.6.2 Using File Storage</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oke/6.persistent-volume/2.file-storage/</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oke/6.persistent-volume/2.file-storage/</guid><description>1.6.2 Using File Storage (based on CSI Driver) The container&amp;rsquo;s internal storage is basically destroyed when the container is deleted or terminated. A separate Persistent Volume is used to protect data from disappearing and to store data that needs to be preserved.
Persistent Volumes allow you to use the popular Network File System (NFS) as storage for file sharing. NFS, a network file system, supports simultaneous writes, so it can be used for simultaneous reading and writing by multiple PODs in Kubernetes.</description></item><item><title>6.2 Understanding the Open Application Model and Deploying Applications</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/verrazzano/2.deploy-app/</link><pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/verrazzano/2.deploy-app/</guid><description>6.2 Understanding the Open Application Model and deploying applications Reference
https://verrazzano.io/latest/docs/guides/app-deployment/application-deployment-guide/ Open Application Model The Open Application Model (OAM) is a model that seeks to enable developers to focus on their applications rather than containers or orchestrators or infrastructure. In order to deploy an application as a container on Kubernetes, in addition to deployment, various resources must be deployed for additional settings such as monitoring and traffic handling, and YAML files must be defined accordingly.</description></item><item><title>1.2 Creating an OKE Cluster</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oke/2.install-quick-oke-cluster/</link><pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oke/2.install-quick-oke-cluster/</guid><description>1.2 Creating an OKE Cluster Create a cluster in Quick mode As the first step to create the OKE cluster, a custom environment such as a separate OKE user and VCN will be used in the real environment, but as the first step to understand OKE, install it in Quick mode through the Administrator user.
Log in to the OCI console.
Go to Developer Services &amp;gt; Containers &amp;amp; Artifacts &amp;gt; Kubernetes Clusters (OKE) from the top left hamburger menu.</description></item><item><title>6.3 Installing Multicluster Verrazzano</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/verrazzano/3.multicluster-verrazzano/</link><pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/verrazzano/3.multicluster-verrazzano/</guid><description>6.3 Installing Multicluster Verrazzano reference document
https://verrazzano.io/latest/docs/applications/multicluster/ Install Verrazzano Install Verrazzano on admin-cluster Installing Verrazzano in a single cluster environment is the same as installing it. dev or prod Install as profile. However, the environment name is specified in the installation yaml file (eg, install-oci.yaml) to distinguish it from managed-cluster.
example
... spec: environmentName: admin profile: dev ... Install Verrazzano on managed-cluster Installing Verrazzano in a single cluster environment is the same as installing it.</description></item><item><title>1.3 Connecting the OKE Cluster</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oke/3.access-cluster/</link><pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oke/3.access-cluster/</guid><description>1.3 Connecting the OKE cluster</description></item><item><title>5.4 Service Operator for OCI Resource Management in OKE</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oci-services/4.oci-service-operator-1.1.0/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oci-services/4.oci-service-operator-1.1.0/</guid><description>5.4 Using Service Operator for OCI resource management in OKE OCI Service Operator for Kubernetes (OSOK) is a tool that helps you manage OCI resources through the Kubernetes API. You can understand the Autonomous Database service as allowing you to create, delete, etc. instances through the Kubernetes API, kubectl. It is built on the open source Operator Framework used by Kubernetes. Related reference sites are as follows. OCI Service Operator</description></item><item><title>6.4 Deploying Applications to Multicluster</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/verrazzano/4.deploy-app-to-multicluster/</link><pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/verrazzano/4.deploy-app-to-multicluster/</guid><description>6.4 Deploying Applications to Multicluster Deploy the Helidon sample application We have seen earlier that Java applications developed using the Helidon framework are deployed in Verrazzano using the Open Application Model. I&amp;rsquo;ve verified that I&amp;rsquo;m deploying against a single Kubernetes cluster.
This time, let&amp;rsquo;s check the deployment in a multi-cluster environment. Verrazzano is deployed against three clusters.
Admin Cluster admin-cluster Managed Cluster managed-cluster-1 managed-cluster-2 Application Deployment Create namespace
Based on single cluster (reference)</description></item><item><title>4. Leveraging Open Source Software (OSS)</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oss/</link><pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oss/</guid><description>4. Leveraging Open Source Software (OSS)</description></item><item><title>1.4 Deploying Apps and Using Load Balancer</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oke/4.deploy-docker-hub-image-with-lb/</link><pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oke/4.deploy-docker-hub-image-with-lb/</guid><description>1.4 Deploying an App and Using a Load Balancer Testing Docker Hub images Try deploying the image to the OKE cluster by pulling the image to the most common form, Public Container Registry.
kubectl create deployment nginx-docker-hub --image=nginx:latest If you check the distribution result, you can see that it has been deployed normally.
oke_admin@cloudshell:~ (ap-chuncheon-1)$ kubectl create deployment nginx-docker-hub --image=nginx:latest deployment.apps/nginx-docker-hub created oke_admin@cloudshell:~ (ap-chuncheon-1)$ kubectl get all NAME READY STATUS RESTARTS AGE pod/nginx-docker-hub-78b9999646-xgtjp 1/1 Running 0 17s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/kubernetes ClusterIP 10.</description></item><item><title>6.5 Deploying WebLogic Server to OKE via Verrazzano</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/verrazzano/5.weblogic-on-oke-using-verrazzano/</link><pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/verrazzano/5.weblogic-on-oke-using-verrazzano/</guid><description>6.5 Deploying WebLogic Server to OKE via Verrazzano When installing Verrazzano, WebLogic Operator is installed together. This content follows and organizes the contents in the document below, and describes how to use it if you want to migrate the application that is deployed and used from the existing on-premise to the WebLogic Server to the Kubernetes environment without modifying the WebLogic Server as a whole. content.
https://verrazzano.io/latest/docs/guides/lift-and-shift/lift-and-shift/ The procedure to perform is as follows.</description></item><item><title>1.5 Using OCIR Images</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oke/5.deploy-ocir-image/</link><pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oke/5.deploy-ocir-image/</guid><description>1.5 Deploying the app using the OCIR image Register image to OCIR Oracle Cloud Infrastructure Registry (OCIR) is a managed container registry provided by Oracle that supports the Docker V2 API and is an Open Container Initiate compliant container registry. You can push and pull images through the docker cli and use them in a Kubernetes cluster.
To use an image for OCIR, registration is required first, and try to register the nginx image used in the previous example by following the procedure below.</description></item><item><title>6. Using the Enterprise Container Platform Verrazzano</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/verrazzano/</link><pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/verrazzano/</guid><description>6. Using Verrazzano Verrazzano is an open-source platform that supports running traditional and cloud-native applications in a Kubernetes environment, and includes various open-source components for each role.
Verrazzano main features as stated in the Verrazzano documentation:
Hybrid and multicluster workload management Special handling for WebLogic, Coherence, and Helidon applications Multicluster infrastructure management Integrated and pre-wired application monitoring Integrated security DevOps and GitOps enablement reference document
https://verrazzano.io/latest/docs/ https://verrazzano.io/latest/docs/setup/versions/#installed-components</description></item><item><title>1.6 Using Persistent Volumes</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oke/6.persistent-volume/</link><pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oke/6.persistent-volume/</guid><description>1.6 Using Persistent Volumes</description></item><item><title>1.7 Upgrading the Kubernetes Version</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oke/7.supported-version-and-upgrade/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oke/7.supported-version-and-upgrade/</guid><description>1.7 Kubernetes Supported Versions and Upgrades Kubernetes supported version Kubernetes version is expressed as x.y.z, where x stands for major, y for minor, and z for patch version, respectively. Open source Kubernetes also supports the current version and up to two previous versions. OKE also supports the latest version supported by OKE, up to two previous minor versions. The supported versions as of today are as follows.
1.20.11 1.19.15 1.18.10 We support the previous version only for 30 days after the new version is released.</description></item></channel></rss>