<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>4.1 Ingress Controller on TheKoguryo's Tech Blog</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oss/ingress-controller/</link><description>Recent content in 4.1 Ingress Controller on TheKoguryo's Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sun, 05 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://thekoguryo.github.io/en/oracle-cloudnative/oss/ingress-controller/index.xml" rel="self" type="application/rss+xml"/><item><title>4.1.1 Installing the NGINX Ingress Controller</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oss/ingress-controller/1.install-nginx-ingress-controller/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oss/ingress-controller/1.install-nginx-ingress-controller/</guid><description>4.1.1 Installing the NGINX Ingress Controller OKE allows you to use several open source ingress controllers available on Kubernetes. In this document, we will test the nginx-ingress-controller, which is used the most and is described as an example in the OKE document. Official documentation https://docs.oracle.com/en-us/iaas/Content/ContEng/Tasks/contengsettingupingresscontroller.htm https://kubernetes.github.io/ingress-nginx/deploy/#oracle-cloud-infrastructure installed version As of the OKE document, the NGINX Ingress Controller for Kubernetes document is based on the latest version, v1.1.3. This document is</description></item><item><title>4.1.2 PATH-Based Routing in NGINX Ingress Controller</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oss/ingress-controller/2.nginx-ingress-path/</link><pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oss/ingress-controller/2.nginx-ingress-path/</guid><description>4.1.2 PATH based routing in NGINX Ingress Controller PATH-based basic routing test This is the most basic routing, and the routing service is different according to the URL PATH.
Deploy the sample app for testing.
Deploy two web pages with different background colors.
kubectl create deployment nginx-blue --image=thekoguryo/nginx-hello:blue kubectl expose deployment nginx-blue --name nginx-blue-svc --port 80 kubectl create deployment nginx-green --image=thekoguryo/nginx-hello:green kubectl expose deployment nginx-green --name nginx-green-svc --port 80 Write the ingress setup YAML (path-basic.</description></item><item><title>4.1.3 Host-Based Routing in NGINX Ingress Controller (feat. OCI DNS)</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oss/ingress-controller/3.nginx-ingress-host/</link><pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oss/ingress-controller/3.nginx-ingress-host/</guid><description>4.1.3 Host based routing in NGINX Ingress Controller (feat. OCI DNS) See how the Ingress Controller uses OCI DNS for routing based on domain names.
Using OCI DNS service This is the process of setting up a domain name that has already been purchased. For testing freenom I used the free Domain Name (thekoguryo.ml) issued by the site.
OCI DNS service settings Log in to the OCI console.
From the top left hamburger menu, go to Networking &amp;gt; DNS Management &amp;gt; Zones.</description></item><item><title>4.1.4 TLS termination in NGINX Ingress Controller</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oss/ingress-controller/4.nginx-ingress-tls-termination/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oss/ingress-controller/4.nginx-ingress-tls-termination/</guid><description>4.1.4 TLS termination on NGINX Ingress Controller (feats. Let&amp;rsquo;s Encrypt) Check the settings for SSL external ingress in the Ingress Controller.
Using Self-Signed Certificates Learn how to create and use Self-Signed certificates for testing purposes. In a real environment, a certificate issued by an authorized certification authority is used. Only the self-signed certificate issuance process is replaced, and the TLS Secret registration process is the same.
References
https://docs.oracle.com/en-us/iaas/Content/ContEng/Tasks/contengsettingupingresscontroller.htm Create a certificate Create a certificate with the following command in Cloud Shell or your environment.</description></item><item><title>4.1.6 Getting Client IP from NGINX Ingress Controller</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/oss/ingress-controller/6.nginx-ingress-preserve-client-ip/</link><pubDate>Fri, 02 Sep 2022 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/oss/ingress-controller/6.nginx-ingress-preserve-client-ip/</guid><description>4.1.6 Get client IP from NGINX Ingress Controller When using the Nginx Ingress Controller, it is necessary to check the real Client IP for monitoring, etc. in the application in the Pod. However, since the client&amp;rsquo;s request goes through the OCI Load Balancer used by the Nginx Ingress Controller, the IP of the Load Balancer is recorded, not the IP of the actual client. Here, we will learn how to get the real Client IP.</description></item></channel></rss>