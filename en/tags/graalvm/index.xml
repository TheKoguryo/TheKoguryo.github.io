<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>graalvm on TheKoguryo's Tech Blog</title><link>https://thekoguryo.github.io/en/tags/graalvm/</link><description>Recent content in graalvm on TheKoguryo's Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Wed, 27 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://thekoguryo.github.io/en/tags/graalvm/index.xml" rel="self" type="application/rss+xml"/><item><title>7.2.1 Creating a GraalVM-based container image</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/appdev/2.graalvm/1.use-graal-vm/</link><pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/appdev/2.graalvm/1.use-graal-vm/</guid><description>7.2.1 Creating a GraalVM-based container image In this article, we will look at how to improve the performance of Java applications without code changes in the simplest way through an improved just-in-time (JIT) compiler.
Container image provided by GraalVM GraalVM provides an open source community version and a commercial enterprise version. The Enterprise version offers higher optimization capabilities. GraalVM is included in the Oracle Java SE subscription model and is available at no cost to resources within Oracle Cloud Infrastructure.</description></item><item><title>7.2 Using GraalVM</title><link>https://thekoguryo.github.io/en/oracle-cloudnative/appdev/2.graalvm/</link><pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate><guid>https://thekoguryo.github.io/en/oracle-cloudnative/appdev/2.graalvm/</guid><description>7.2 Using GraalVM GraalVM is a Java runtime that provides performance improvements for Java applications by adding an advanced just-in-time (JIT) optimizing compiler. An improved optimization technique is used when converting Java code converted to byte code in a just-in-time method into machine code at the time of execution and executing it. In addition to this, it provides a function to create a native image that can be executed directly, not bytecode, so that it can be executed at runtime without JVM in an ahead-of-time (AOT) method.</description></item></channel></rss>